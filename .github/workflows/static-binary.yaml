name: "VAST Static"
on:
  repository_dispatch:
    types: static-binary
  workflow_dispatch:
    inputs:
      arguments:
        description: 'Additional arguments to pass, e.g., `--with-plugin=<path/to/plugin>` or `-D<CMake Option>`'
        required: false
        default: ''
  push:
    branches:
      - master
  pull_request:
    paths:
      - '.github/workflows/static-binary.yaml'
      - 'nix/**'
      - '**.cmake'
      - '**CMakeLists.txt'
  release:
    types:
      - released
      - prereleased

jobs:
  static_binary:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        args:
          - 'vast'
          - 'vast-ci'
    name: Static Binary (${{ matrix.args }})
    env:
      BUILD_DIR: build
    steps:
    - name: Checkout
      if: github.event_name == 'repository_dispatch'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.event.client_payload.ref == '' && 'master' ||Â github.event.client_payload.ref }}

    - name: Checkout
      if: github.event_name != 'repository_dispatch'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Setup Cachix
      uses: cachix/cachix-action@v7
      with:
        name: vast
        signingKey: '${{ secrets.CACHIX_VAST_SIGNING_KEY }}'

    - name: Build Static Binary
      env:
        STATIC_BINARY_TARGET: ${{ matrix.args }}
      run: |
        nix/static-binary.sh --use-head ${{ github.event.inputs.arguments }}

    - name: Create Paths
      id: create_paths
      run: |
        ARTIFACT_NAME=$(ls "${BUILD_DIR}" | grep "${{ matrix.args }}.*.tar.gz")
        echo "::set-output name=artifact_name::${ARTIFACT_NAME}"

    - name: Upload Artifact to Github
      uses: actions/upload-artifact@v2
      with:
        name: "${{ steps.create_paths.outputs.artifact_name }}"
        path: "${{ env.BUILD_DIR }}/${{ steps.create_paths.outputs.artifact_name }}"

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Configure GCloud Credentials
      if: github.event_name != 'pull_request'
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Upload Artifact to GCS
      if: github.event_name != 'pull_request'
      env:
        PUBLIC_GCS_BUCKET: tenzir-public-data
        STATIC_BINARY_FOLDER: vast-static-builds
      run: |
        gsutil cp "${{ env.BUILD_DIR }}/${{ steps.create_paths.outputs.artifact_name }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ steps.create_paths.outputs.artifact_name }}"

    - name: Update 'vast-latest' symlink on GCS
      if: github.event_name == 'push'
      env:
        PUBLIC_GCS_BUCKET: tenzir-public-data
        STATIC_BINARY_FOLDER: vast-static-builds
      run: |
        gsutil cp "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ steps.create_paths.outputs.artifact_name }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ matrix.args }}-static-latest.tar.gz"

    - name: Add 'vast-release' symlink on GCS
      if: github.event_name == 'release'
      env:
        PUBLIC_GCS_BUCKET: tenzir-public-data
        STATIC_BINARY_FOLDER: vast-static-builds
      run: |
        RELEASE_MONTH=$(echo "${{ steps.create_paths.outputs.artifact_name }}" | cut -d"-" -f2)
        gsutil cp "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ steps.create_paths.outputs.artifact_name }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ matrix.args }}-${RELEASE_MONTH}-static-latest.tar.gz"

    # This step ensures that assets from previous runs are cleaned up to avoid
    # failure of the next step (asset upload)
    - name: Delete Release Assets
      if: github.event_name == 'release'
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        fail-if-no-assets: false # don't fail if no previous assets exist
        fail-if-no-release: true # only delete assets when `tag` refers to a release
        assets: "${{ matrix.args }}-linux-static.tar.gz"

    - name: Upload Release Assets
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: "${{ env.BUILD_DIR }}/${{ steps.create_paths.outputs.artifact_name }}"
        # The asset name is constant so we can permanently link to
        # https://github.com/tenzir/vast/releases/latest/download/vast-linux-static.tar.gz
        # for a build of the latest release.
        asset_name: "${{ matrix.args }}-linux-static.tar.gz"
        asset_content_type: application/gzip
